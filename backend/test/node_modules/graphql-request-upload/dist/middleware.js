"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.uploadMiddleware = void 0;
const graphql_request_1 = require("graphql-request");
const utils_1 = require("./utils");
function buildFormData(document, variables) {
    const formData = new FormData();
    const [filesKeys, finalVariables] = (0, utils_1.getFilesKeysAndPayload)(variables);
    formData.append('operations', JSON.stringify({
        query: (0, graphql_request_1.resolveRequestDocument)(document).query,
        variables: finalVariables
    }));
    const properties = filesKeys
        .map((key, index) => [String(index), key]);
    const finalMap = Object.fromEntries(properties
        .map(([index, key]) => {
        return [index, ['variables.' + key]];
    }));
    formData.append('map', JSON.stringify(finalMap));
    for (const [index, key] of properties) {
        const value = (0, utils_1.getNestedValue)(variables, key);
        let filename = undefined;
        if (value instanceof File)
            filename = value.name;
        formData.append(index, value, filename);
    }
    return formData;
}
const uploadMiddleware = (request) => {
    const variables = request.variables;
    if (variables === undefined)
        return request;
    const hasFiles = (0, utils_1.hasBlobValue)(variables);
    if (!hasFiles)
        return request;
    if (request.body == null)
        return request;
    const body = JSON.parse(request.body);
    const formData = buildFormData(body.query, variables);
    request.body = formData;
    request.method = 'POST';
    if (request.headers !== undefined)
        delete request.headers['Content-Type'];
    return request;
};
exports.uploadMiddleware = uploadMiddleware;
